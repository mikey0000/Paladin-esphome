esphome:
  name: paladin


esp8266:
  board: nodemcuv2

mqtt:
  broker: 
  username: esphome
  password: 
  on_message:
     - topic: paladin/command
       then:
        - uart.write: !lambda
                      return std::vector<unsigned char>( x.begin(), x.end() );


# Enable logging
logger: 
  # baud_rate: 57600 
  level: VERBOSE 
  baud_rate: 0 #No logging over uart
  logs: 
    uart: VERBOSE
    sensor: INFO
    json: INFO
    mqtt: INFO

# Enable Home Assistant API

api:
  encryption:
    key: 

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Paladin Fallback Hotspot"
    password:


time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Pacific/Auckland"
    # servers:
    #   - pool.ntp.org 

captive_portal:

esp32_ble_tracker:
  scan_parameters:
    # We currently use the defaults to ensure Bluetooth
    # can co-exist with WiFi In the future we may be able to
    # enable the built-in coexistence logic in ESP-IDF
    active: true

bluetooth_proxy:
  active: true
    

globals:
  - id: min_temp_prev
    type: std::string
    restore_value: no
    initial_value: ""
  - id: max_temp_prev
    type: std::string
    restore_value: no
    initial_value: ""
    

uart:
  id: uart_bus
  tx_pin:
    number: GPIO17
  rx_pin:
    number: GPIO16
  rx_buffer_size: 256
  baud_rate: 57600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);  //Still log the data
          float sensors_values[20] = {0};
          std::string str(bytes.begin(), bytes.end());

          if (sscanf(
                str.c_str(),
                "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f",
                &sensors_values[0], &sensors_values[1], &sensors_values[2],
                &sensors_values[3], &sensors_values[4], &sensors_values[5],
                &sensors_values[6], &sensors_values[7], &sensors_values[8],
                &sensors_values[9], &sensors_values[10], &sensors_values[11],
                &sensors_values[12], &sensors_values[13], &sensors_values[14],
                &sensors_values[15], &sensors_values[16], &sensors_values[17],
                &sensors_values[18], &sensors_values[19]) == 20){
                  
            id(paladin_mains_watts).publish_state(sensors_values[0]);
            id(paladin_transfer_watts).publish_state(sensors_values[1]);
            id(paladin_water_temp).publish_state(sensors_values[3]);
            id(paladin_delta_t).publish_state(sensors_values[4]);
            id(paladin_min_temp).publish_state(sensors_values[5]);
            id(paladin_max_temp).publish_state(sensors_values[6]);
            id(paladin_grid_in).publish_state(sensors_values[7]);
            id(paladin_grid_out).publish_state(sensors_values[8]);
            id(paladin_transfer).publish_state(sensors_values[9]);
            id(paladin_top_up).publish_state(sensors_values[10]);
            id(paladin_hhours).publish_state(sensors_values[12]);
            id(paladin_inverter_status).publish_state(sensors_values[13]);
            id(paladin_charger_control).publish_state(sensors_values[14]);
            id(paladin_solar_export_flag).publish_state(sensors_values[15]);
            id(paladin_export_limit).publish_state(sensors_values[16]);
            id(paladin_allow_import_flag).publish_state(sensors_values[17]);
            id(paladin_offset_flag).publish_state(sensors_values[18]);
            id(paladin_time_hack).publish_state(sensors_values[19]);
            id(paladin_select_min_temp).publish_state(std::to_string((int)sensors_values[5]));
            id(paladin_select_max_temp).publish_state(std::to_string((int)sensors_values[6]));
          }


      

interval:
  - interval: 5s
    then:
      - uart.write: 'A'
    
  - interval: 1h
    then:
      - lambda: |-
          id(homeassistant_time).update();
          auto time_now = id(homeassistant_time).now();
          if (time_now.is_valid()) {
            int seconds = time_now.hour * 3600 + time_now.minute * 60 + time_now.second;
            std::string seconds_str = "T" + std::to_string(seconds);
            std::vector<unsigned char> data(seconds_str.begin(), seconds_str.end());
            id(uart_bus).write_array(data.data(), data.size());
          }


sensor:
  - platform: template
    name: "Mains Watts"
    id: "paladin_mains_watts"
    unit_of_measurement: W
    device_class: power
    state_class: measurement

  - platform: template
    name: "Transfer Watts"
    id: "paladin_transfer_watts"
    unit_of_measurement: W
    device_class: power
    state_class: measurement

  - platform: template
    name: "Water Temp"
    id: "paladin_water_temp"
    device_class: temperature
    state_class: measurement

  - platform: template
    name: "Delta T"
    id: "paladin_delta_t"
    device_class: temperature
    state_class: measurement

  - platform: template
    name: "Min Temperature"
    id: "paladin_min_temp"
    device_class: temperature

  - platform: template
    name: "Max Temperature"
    id: "paladin_max_temp"
    device_class: temperature

  - platform: template
    name: "Grid In"
    id: "paladin_grid_in"
    unit_of_measurement: W
    device_class: power
    state_class: measurement

  - platform: template
    name: "Grid Out"
    id: "paladin_grid_out"
    unit_of_measurement: W
    device_class: power
    state_class: measurement

  - platform: template
    name: "Transfer"
    id: "paladin_transfer"
    unit_of_measurement: W
    device_class: power

  - platform: template
    name: "Top Up"
    id: "paladin_top_up"
    unit_of_measurement: W
    device_class: power

  - platform: template
    name: "Health Hours"
    id: "paladin_hhours"
    device_class: duration

  - platform: template
    name: "Time seconds"
    id: "paladin_time_hack"

    
select:
  - platform: template
    name: "Max Temperature"
    id: "paladin_select_max_temp"
    optimistic: true
    options:
      - "10"
      - "73"
      - "78"
      - "83"
      - "88"
    initial_option: "73"
    on_value:
      then:
        - lambda: |-
            std::string current_value = id(paladin_select_max_temp).state.c_str();
            
            if (current_value == id(max_temp_prev)) {
              return;
            }

            id(max_temp_prev) = current_value;

            char buf[2];
            buf[1] = '\0';
            if (x == "10") {
              buf[0] = '9';
            } else if (x == "73") {
              buf[0] = 'm';
            } else if (x == "78") {
              buf[0] = 'M';
            } else if (x == "83") {
              buf[0] = 'N';
            } else if (x == "88") {
              buf[0] = 'n';
            }
            id(uart_bus).write_array(reinterpret_cast<uint8_t*>(buf), 2);


  - platform: template
    name: "Min Temperature"
    id: "paladin_select_min_temp"
    optimistic: true
    options:
      - "10"
      - "20"
      - "30"
      - "40"
      - "50"
      - "60"
    initial_option: "30"
    on_value:
      then:
        - lambda: |-
            std::string current_value = id(paladin_select_min_temp).state.c_str();
            
            if (current_value == id(min_temp_prev)) {
              return;
            }

            id(min_temp_prev) = current_value;

            char buf[2];
            buf[1] = '\0';
            if (x == "10") {
              buf[0] = '1';
            } else if (x == "20") {
              buf[0] = '2';
            } else if (x == "30") {
              buf[0] = '3';
            } else if (x == "40") {
              buf[0] = '4';
            } else if (x == "50") {
              buf[0] = '5';
            } else if (x == "60") {
              buf[0] = '6';
            }
            id(uart_bus).write_array(reinterpret_cast<uint8_t*>(buf), 2);
            
  - platform: template
    name: "Export Overflow"
    id: paladin_select_export_overflow
    optimistic: true
    options:
      - "1000W"
      - "2000W"
      - "3000W"
      - "4000W"
      - "5000W"
      - "6000W"
    initial_option: "1000W"
    on_value:
      then:
        - lambda: |-
            char buf[2];
            buf[1] = '\0';
            if (x == "1000W") {
              buf[0] = '@';
            } else if (x == "2000W") {
              buf[0] = '#';
            } else if (x == "3000W") {
              buf[0] = '$';
            } else if (x == "4000W") {
              buf[0] = '%';
            } else if (x == "5000W") {
              buf[0] = '^';
            } else if (x == "6000W") {
              buf[0] = '&';
            }
            id(uart_bus).write_array(reinterpret_cast<uint8_t*>(buf), 2);
            
binary_sensor:

  - platform: template
    name: "Flag - Solar Export"
    id: "paladin_solar_export_flag"

  - platform: template
    name: "Flag - Allow Import"
    id: "paladin_allow_import_flag"

  - platform: template
    name: "Flag - Export before Transfer"
    id: "paladin_offset_flag"


button:
  - platform: template
    name: "Cancel All Commands"
    id: cancel_all
    on_press:
      - uart.write:
          id: uart_bus
          data: "X"  # Cancel all commands and revert to normal

  - platform: template
    name: "Reset Counters"
    id: reset_counters
    on_press:
      - uart.write:
          id: uart_bus
          data: "x"  # Reset Counters

  - platform: template
    name: "Soft Reset"
    id: soft_reset
    on_press:
      - uart.write:
          id: uart_bus
          data: "Z"  # Soft Reset

  - platform: restart
    name: "Paladin Restart"


switch:

  - platform: template
    name: "Hot Water Boost Control"
    id: hot_water_boost_control
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "B"  # One-time boost to 60C
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "b"  # Cancel Health Hours boost

  - platform: template
    name: "Charger Control"
    id: paladin_charger_control
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "C"  # Enable battery Charger
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "c"  # Disable battery Charger

  - platform: template
    name: "Force Solar Export"
    id: force_solar_export
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "E"  # Enable solar Export
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "e"  # Disable solar Export

  - platform: template
    name: "CT OverFlow Control"
    id: ct_overflow_control
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "F"  # Force higher overFlow value
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "f"  # Revert to normal overFlow

  - platform: template
    name: "Health Checking Control"
    id: health_checking_control
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "H"  # Enable Health Checking
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "h"  # Disable Health Checking

  - platform: template
    name: "Inverter Status"
    id: paladin_inverter_status
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "I"  # Inverter ON
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "i"  # Inverter OFF

  - platform: template
    name: "Stop All SSR Activity"
    id: paladin_ssr_activity
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "p"  # Enable all SSR activity
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "P"  # Stop all SSR activity

  - platform: template
    name: "Ramp Up on TopUp"
    id: paladin_ramp_up
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "J"  # Enable Ramp Up
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "j"  # Disable Ramp Up

  - platform: template
    name: "Back Light Control"
    id: paladin_backlight_control
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "S"  # Screen ON
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "s"  # Screen OFF

  - platform: template
    name: "5400W Limit"
    id: paladin_watt_limit
    optimistic: true
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "W"  # Enable 5400W Limit
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "w"  # Disable 5400W Limit

  - platform: template
    name: "Export Limit"
    id: paladin_export_limit
    turn_on_action:
      - uart.write:
          id: uart_bus
          data: "~"  # Enable Export Limit
    turn_off_action:
      - uart.write:
          id: uart_bus
          data: "!"  # Disable Export Limit
